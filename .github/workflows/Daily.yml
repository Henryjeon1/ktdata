# This is a basic workflow to help you get started with Actions

name: Daily

on:
  workflow_dispatch:  # 🟢 수동 실행을 허용
    inputs:
      date:
        description: "업데이트할 날짜 (YYYY-MM-DD)"
        required: true

jobs:
  update-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3


      - name: Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"


      - name: 필요한 패키지 설치
        run: pip install pandas pyarrow requests pymysql jq

      - name: 데이터 생성 실행
        run: python data_daily_update.py ${{ github.event.inputs.date }}

      - name: Release에 데이터 업로드
        run: |
          TAG_NAME=$(date +'%Y-%m-%d')  # 오늘 날짜를 태그로 사용
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

          # 릴리스가 이미 존재하는지 확인
          API_URL="https://api.github.com/repos/${{ github.repository }}/releases"
          RELEASE_EXISTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/tags/${TAG_NAME}")

          if [[ "$RELEASE_EXISTS" == *"Not Found"* ]]; then
            echo "새로운 릴리스를 생성합니다."
            RELEASE_RESPONSE=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"tag_name\": \"${TAG_NAME}\", \"name\": \"${TAG_NAME}\", \"body\": \"릴리스 내용\"}" \
            "$API_URL")
          else
            echo "기존 릴리스를 가져옵니다."
            RELEASE_ID=$(echo "$RELEASE_EXISTS" | jq -r '.id')
            RELEASE_RESPONSE=$(curl -s -X PATCH -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"name\": \"${TAG_NAME}\", \"body\": \"업데이트된 내용\"}" \
            "$API_URL/$RELEASE_ID")
          fi

          # 업로드할 파일 경로
          FILE_PATH="data.csv"

          # 릴리스 생성 후 업로드 URL 가져오기
          UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.upload_url' | sed -e "s/{?name,label}//")

          # 업로드 URL이 정상인지 확인
          if [[ "$UPLOAD_URL" == "null" || -z "$UPLOAD_URL" ]]; then
            echo "❌ 업로드 URL을 가져오지 못했습니다."
            exit 1
          fi

          echo "🔗 업로드 URL: $UPLOAD_URL"

          # GitHub Release에 파일 업로드
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"${FILE_PATH}" \
            "${UPLOAD_URL}?name=$(basename ${FILE_PATH})"

          echo "✅ 파일 업로드 완료!"
